### Snakefile for CYP patient sample files

#INCLUDING RULE FILES
SAMPLE_IDS = config['SAMPLE_IDS']
REGION_ID = config['region_id']
ASM_PRESET= config['MINIMAP']['asmPreset']
tmpdir = config['TMPDIR']

def get_sequences(sample_id):
    return config["SEQUENCES"][sample_id]

### ALL RULES
rule all:
	input:
		"results/graph/hprc-v1.1-mc-chm13.d9.pg.vg",
		expand("results/alignment/{sample_id}/alignments-combined.processed.sorted.gaf.gz", sample_id=SAMPLE_IDS),
		expand("results/alignment/{sample_id}/alignments-combined.processed.sorted.gaf.gz.tbi", sample_id=SAMPLE_IDS),
		expand("results/{sample_id}/{region_id}/chunk/subgraph.pg.vg", sample_id=SAMPLE_IDS, region_id=REGION_ID),
		expand("results/{sample_id}/{region_id}/chunk/subgraph.pg.gfa", sample_id=SAMPLE_IDS, region_id=REGION_ID),
		expand("results/{sample_id}/{region_id}/chunk/subgraph.gaf", sample_id=SAMPLE_IDS, region_id=REGION_ID),
		expand("results/{sample_id}/{region_id}/anchors/subgraph.pkl", sample_id=SAMPLE_IDS, region_id=REGION_ID),
		expand("results/{sample_id}/{region_id}/anchors/subgraph.anchors.json.extended.jsonl", sample_id=SAMPLE_IDS, region_id=REGION_ID),
		expand("results/{sample_id}/{region_id}/anchors/subgraph.anchors.json.jsonl", sample_id=SAMPLE_IDS, region_id=REGION_ID),
		expand("results/reads/{sample_id}.fasta", sample_id=SAMPLE_IDS),
		expand("results/{sample_id}/{region_id}/shasta/{sample_id}.subregion.fasta", sample_id=SAMPLE_IDS, region_id=REGION_ID),
		expand("results/alignment_chm13/{sample_id}/{sample_id}_to_CHM13_minimap.bam", sample_id=SAMPLE_IDS),
		expand("results/alignment_grch38/{sample_id}/{sample_id}_to_GRCh38_minimap.bam", sample_id=SAMPLE_IDS),
		expand("results/alignment_chm13/{sample_id}/{sample_id}_to_CHM13_minimap.bam.bai", sample_id=SAMPLE_IDS),
		expand("results/alignment_grch38/{sample_id}/{sample_id}_to_GRCh38_minimap.bam.bai", sample_id=SAMPLE_IDS),
		expand("results/{sample_id}/{region_id}/shasta/ShastaRun/Assembly.fasta", sample_id=SAMPLE_IDS, region_id=REGION_ID),
		expand("results/{sample_id}/{region_id}/shasta_noext/ShastaRun/Assembly.fasta", sample_id=SAMPLE_IDS, region_id=REGION_ID),
		expand("results/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_shasta_to_grch38_minimap_{asm_preset}.paf", sample_id=SAMPLE_IDS, region_id=REGION_ID, asm_preset=ASM_PRESET),
		expand("results/{sample_id}/{region_id}/assembly_alignment/grch38.chunked.fasta", sample_id=SAMPLE_IDS, region_id=REGION_ID),
		expand("results/{sample_id}/{region_id}/anchors/extended_anchor_reads_info.tsv", sample_id=SAMPLE_IDS, region_id=REGION_ID),
		expand("results/{sample_id}/{region_id}/extended_anchor_stats", sample_id=SAMPLE_IDS, region_id=REGION_ID),
		expand("results/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_ZOOMED_shasta_to_grch38_minimap_{asm_preset}.paf", sample_id=SAMPLE_IDS, region_id=REGION_ID, asm_preset=ASM_PRESET),
		expand("results/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_ZOOMED_shasta_to_grch38_minimap_{asm_preset}_displayPaf.csv", sample_id=SAMPLE_IDS, region_id=REGION_ID, asm_preset=ASM_PRESET),
		expand("results/{sample_id}/{region_id}/assembly_alignment/{asm_preset}_plots", sample_id=SAMPLE_IDS, region_id=REGION_ID, asm_preset=ASM_PRESET)


rule align_ont_r10_with_vg_giraffe:
	output:
		merged_fq="results/reads/{sample_id}.merged.fastq.gz",
		alignment="results/alignment/{sample_id}/{sample_id}.gaf.zst"
	input:
		script="workflow/scripts/process_out.awk",
        sampled_gbz="results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.gbz",
        distance_index="results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.dist",
        minimizer_index="results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.longread.withzip.min",
		zipcodes=config["graph_base"] + "." + config["minparams"] + ".zipcodes",
		sequence_files = lambda wildcards: expand("{reads_file}", reads_file=get_sequences(wildcards.sample_id))
	benchmark:
		"benchmarks/{sample_id}/align_ont_r10_GIAB_with_vg_giraffe.benchmark.txt"
	log:
		"logs/{sample_id}/align_ont_r10_GIAB_with_vg_giraffe.log"
	threads: 128
	shell:
		"""
		cat {input.sequence_files} > {output.merged_fq}
		vg giraffe -t {threads} --parameter-preset r10 -f {output.merged_fq} -Z {input.graph_gbz} -d {input.distance_index} -m {input.minimizer_index} -z {input.zipcodes} --output-format gaf 2> {log} | {input.script} | zstd > {output.alignment}
		"""

rule sort_index_gaf:
	output:
		sorted_gaf = "results/alignment/{sample_id}/alignments-combined.processed.sorted.gaf.gz",
		gaf_index = "results/alignment/{sample_id}/alignments-combined.processed.sorted.gaf.gz.tbi"
	input:
		script="workflow/scripts/parse_gaf.py",
		gaf="results/alignment/{sample_id}/{sample_id}.gaf.zst"
	log:
		"logs/{sample_id}/sort_index_gaf.log"
	threads: 64
	shell:
		"""
		# PARSE, SORT AND INDEX
		python3 {input.script} {input.gaf} | vg gamsort -t {threads} -p -G - | bgzip -c > {output.sorted_gaf} 2> {log}
		tabix -@ {threads} -p gaf {output.sorted_gaf}
		"""

rule convert_fq_to_fasta:
	output:
		fasta="results/reads/{sample_id}.fasta"
	input:
		merged_fq="results/reads/{sample_id}.merged.fastq.gz"
	benchmark:
		"benchmarks/{sample_id}/convert_fq_to_fasta.benchmark.txt"
	log:
		"logs/{sample_id}/convert_fq_to_fasta.log"
	shell:
		"""
		# Convert FASTQ to FASTA
		zcat {input.merged_fq} | awk '{{if(NR%4==1) {{printf(">%s\\n",substr($0,2));}} else if(NR%4==2) print;}}' > {output.fasta}
		"""

rule vg_chunk:
	output:
		subgraph_vg="results/{sample_id}/{region_id}/chunk/subgraph.vg",
		chunked_gaf="results/{sample_id}/{region_id}/chunk/subgraph.gaf",
		subgraph_pg_vg="results/{sample_id}/{region_id}/chunk/subgraph.pg.vg",
		subgraph_pg_gfa="results/{sample_id}/{region_id}/chunk/subgraph.pg.gfa"
	input:
		sorted_gaf="results/alignment/{sample_id}/alignments-combined.processed.sorted.gaf.gz",
		graph_gbz=config["graph_base"] + ".gbz",
		graph_snarl=config["graph_snarl"],
	params:
		region="CHM13#0#" + config['region']['chromosome'] + ":" + config['region']['start'] + "-" + config['region']['end'],
		region_underscore="_0_CHM13#0#" + config['region']['chromosome'] + "_" + config['region']['start'] + "_" + config['region']['end'],
		prefix="results/{sample_id}/{region_id}/chunk/subgraph",
		region_id=config["region_id"]
	benchmark:
		"benchmarks/{sample_id}/{region_id}/vg_chunk.benchmark.txt"
	log:
		"logs/{sample_id}/{region_id}/vg_chunk.log"
	threads: 128
	shell:
		"""
        vg chunk -a {input.sorted_gaf} -F -g -x {input.graph_gbz} -p {params.region} -S {input.graph_snarl} --trace -t {threads} -b {params.prefix} > {output.subgraph_vg}
        mv {params.prefix}{params.region_underscore}.gaf {output.chunked_gaf}
		vg convert -p {output.subgraph_vg} > {output.subgraph_pg_vg}
		vg convert -f {output.subgraph_pg_vg} > {output.subgraph_pg_gfa}
		"""

rule vg_index_dist:
	output:
		subgraph_pg_dist="results/{sample_id}/{region_id}/chunk/subgraph.pg.dist"
	input:
		subgraph_pg_vg="results/{sample_id}/{region_id}/chunk/subgraph.pg.vg"
	log:
		"logs/{sample_id}/{region_id}/vg_index_dist.log"
	threads: 32
	shell:
		"""
		 vg index {input.subgraph_pg_vg} --threads {threads} --dist-name {output.subgraph_pg_dist}
		"""

rule generate_anchors_dictionary:
	output:
		anchors_dictionary="results/{sample_id}/{region_id}/anchors/subgraph.pkl"
	input:
		subgraph_pg_dist="results/{sample_id}/{region_id}/chunk/subgraph.pg.dist",
		graph_pg_vg="results/graph/hprc-v1.1-mc-chm13.d9.pg.vg"
	benchmark:
		"benchmarks/{sample_id}/{region_id}/generate_anchors_dictionary.benchmark.txt"
	log:
		"logs/{sample_id}/{region_id}/generate_anchors_dictionary.log"
	shell:
		"""
		vg_anchor build --graph {input.graph_pg_vg} --index {input.subgraph_pg_dist} --output-prefix results/{wildcards.sample_id}/{wildcards.region_id}/anchors/subgraph > {log} 2>&1
		"""

rule get_anchors_from_gaf:
	output:
		anchors_preext="results/{sample_id}/{region_id}/anchors/subgraph.anchors.json.jsonl",
		anchors="results/{sample_id}/{region_id}/anchors/subgraph.anchors.json.extended.jsonl"
	input:
		anchors_dictionary="results/{sample_id}/{region_id}/anchors/subgraph.pkl",
		chunked_gaf="results/{sample_id}/{region_id}/chunk/subgraph.gaf",
		graph_pg_vg="results/graph/hprc-v1.1-mc-chm13.d9.pg.vg"
	benchmark:
		"benchmarks/{sample_id}/{region_id}/get_anchors_from_gaf.benchmark.txt"
	log:
		"logs/{sample_id}/{region_id}/get_anchors_from_gaf.log"
	shell:
		"""
		vg_anchor get-anchors --dictionary {input.anchors_dictionary} --graph {input.graph_pg_vg} --alignment {input.chunked_gaf} --output results/{wildcards.sample_id}/{wildcards.region_id}/anchors/subgraph.anchors.json > {log} 2>&1
		"""

rule chunk_fasta:
	output:
		chunked_fasta = "results/{sample_id}/{region_id}/shasta/{sample_id}.subregion.fasta"
	input:
		chunked_gaf="results/{sample_id}/{region_id}/chunk/subgraph.gaf",
		fasta="results/reads/{sample_id}.fasta"
	benchmark:
		"benchmarks/{sample_id}/{region_id}/chunk_fasta.benchmark.txt"
	log:
		"logs/{sample_id}/{region_id}/chunk_fasta.log"
	container:
		"docker://pegi3s/seqkit:latest"
	shell:
		"""
		# Extract READ IDs from chunked GAF and then extract fasta records for these reads
		cut -f1 {input.chunked_gaf} | seqkit grep -f - {input.fasta} > {output.chunked_fasta}
		"""

rule chunk_grch38_reference:
	output:
		chunked_reference="results/{sample_id}/{region_id}/assembly_alignment/grch38.chunked.fasta"
	input:
		grch38_reference=config["grch38_ref"],
	params:
		subset_range=config['region']['chromosome'] + ":" + str(int(config['region']['start']) - config['region']['flank']) + "-" + str(int(config['region']['end']) + config['region']['flank'])
	benchmark:
		"benchmarks/{sample_id}/{region_id}/chunk_grch38_reference.benchmark.txt"
	log:
		"logs/{sample_id}/{region_id}/chunk_grch38_reference.log"
	shell:
		"""
		echo {params.subset_range}
		samtools faidx {input.grch38_reference} {params.subset_range} > {output.chunked_reference}
		"""

rule align_reads_to_linear_reference:
	output:
		alignment_bam = "results/alignment_chm13/{sample_id}/{sample_id}_to_CHM13_minimap.bam",
		alignment_bam_idx = "results/alignment_chm13/{sample_id}/{sample_id}_to_CHM13_minimap.bam.bai"
	input:
		merged_fq="results/reads/{sample_id}.merged.fastq.gz",
		reference=config["chm13_ref"]
	params:
		mapMode="map-ont",
		kmerSize=config["MINIMAP"]["kmerSize"],
		minibatchSize=config["MINIMAP"]["minibatchSize"],
		mdString=config["MINIMAP"]["mdString"],
		eqxString=config["MINIMAP"]["eqxString"]
	benchmark: "benchmarks/{sample_id}/align_reads_to_linear_reference.benchmark.txt"
	log: "logs/{sample_id}/align_reads_to_linear_reference.log"
	container: "docker://mkolmogo/card_minimap2:2.23"
	threads: 64
	shell:
		"""
		minimap2 -ax {params.mapMode} {input.reference} {input.merged_fq} -k {params.kmerSize} -y -K {params.minibatchSize} -t {threads} {params.mdString} {params.eqxString} | samtools sort -@16 - > {output.alignment_bam}
		samtools index -@ {threads} {output.alignment_bam}
		"""

rule align_reads_to_grch38_reference:
	output:
		alignment_bam = "results/alignment_grch38/{sample_id}/{sample_id}_to_GRCh38_minimap.bam",
		alignment_bam_idx = "results/alignment_grch38/{sample_id}/{sample_id}_to_GRCh38_minimap.bam.bai"
	input:
		merged_fq="results/reads/{sample_id}.merged.fastq.gz",
		reference=config["grch38_ref"]
	params:
		mapMode="map-ont",
		kmerSize=config["MINIMAP"]["kmerSize"],
		minibatchSize=config["MINIMAP"]["minibatchSize"],
		mdString=config["MINIMAP"]["mdString"],
		eqxString=config["MINIMAP"]["eqxString"]
	benchmark: "benchmarks/{sample_id}/align_reads_to_grch38_reference.benchmark.txt"
	log: "logs/{sample_id}/align_reads_to_grch38_reference.log"
	container: "docker://mkolmogo/card_minimap2:2.23"
	threads: 64
	shell:
		"""
		minimap2 -ax {params.mapMode} {input.reference} {input.merged_fq} -k {params.kmerSize} -y -K {params.minibatchSize} -t {threads} {params.mdString} {params.eqxString} | samtools sort -@16 - > {output.alignment_bam}
		samtools index -@ {threads} {output.alignment_bam}
		"""

rule run_shasta_assembly_without_extention:
	output: "results/{sample_id}/{region_id}/shasta_noext/ShastaRun/Assembly.fasta"
	input:
		shasta=config["SHASTA"]["bin"],
		chunked_fasta = "results/{sample_id}/{region_id}/shasta/{sample_id}.subregion.fasta",
		shasta_conf = config["SHASTA"]["conf"],
		anchors="results/{sample_id}/{region_id}/anchors/subgraph.anchors.json.jsonl"
	benchmark: "benchmarks/{sample_id}/{region_id}/run_shasta_assembly_without_extention.benchmark.txt"
	log: "logs/{sample_id}/{region_id}/run_shasta_assembly_without_extention.log"
	shell:
		"""
		## make a copy of the anchors.json for Shasta
		cp {input.anchors} results/{wildcards.sample_id}/{wildcards.region_id}/shasta_noext/anchors.json
		rm -rf results/{wildcards.sample_id}/{wildcards.region_id}/shasta_noext/ShastaRun
		{input.shasta} --input {input.chunked_fasta} --assemblyDirectory results/{wildcards.sample_id}/{wildcards.region_id}/shasta_noext/ShastaRun --config {input.shasta_conf} --anchors results/{wildcards.sample_id}/{wildcards.region_id}/shasta_noext/anchors.json --memoryMode filesystem --memoryBacking disk > {log} 2>&1
		"""

rule run_shasta_assembly:
	output: "results/{sample_id}/{region_id}/shasta/ShastaRun/Assembly.fasta"
	input:
		shasta=config["SHASTA"]["bin"],
		chunked_fasta = "results/{sample_id}/{region_id}/shasta/{sample_id}.subregion.fasta",
		shasta_conf = config["SHASTA"]["conf"],
		anchors="results/{sample_id}/{region_id}/anchors/subgraph.anchors.json.extended.jsonl"
	benchmark: "benchmarks/{sample_id}/{region_id}/run_shasta_assembly.benchmark.txt"
	log: "logs/{sample_id}/{region_id}/run_shasta_assembly.log"
	shell:
		"""
		## make a copy of the anchors.json for Shasta
		cp {input.anchors} results/{wildcards.sample_id}/{wildcards.region_id}/shasta/anchors.json
		rm -rf results/{wildcards.sample_id}/{wildcards.region_id}/shasta/ShastaRun
		{input.shasta} --input {input.chunked_fasta} --assemblyDirectory results/{wildcards.sample_id}/{wildcards.region_id}/shasta/ShastaRun --config {input.shasta_conf} --anchors results/{wildcards.sample_id}/{wildcards.region_id}/shasta/anchors.json --memoryMode filesystem --memoryBacking disk > {log} 2>&1
		"""

rule align_assembly_to_reference:
	output:
		paf="results/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_shasta_to_grch38_minimap_{asm_preset}.paf"
	input:
		analyzePaf_bin=config["ANALYSEPAF"]["bin"],
		# hg002_reference=config["HG002v101_ref"],
		grch38_reference=config["grch38_ref"],
		subregion_shasta_assembly="results/{sample_id}/{region_id}/shasta/ShastaRun/Assembly.fasta"
	params:
		asm_preset=config["MINIMAP"]["asmPreset"]
	benchmark: "benchmarks/{sample_id}/{region_id}/align_assembly_to_reference_{asm_preset}.benchmark.txt"
	log: "logs/{sample_id}/{region_id}/align_assembly_to_reference_{asm_preset}.log"
	container: "docker://mkolmogo/card_minimap2:2.23"
	threads: 64
	shell:
		"""
		minimap2 -t {threads} -I 20G -cx {params.asm_preset} -K 0M --eqx --cs {input.grch38_reference} {input.subregion_shasta_assembly} > {output.paf}
		{input.analyzePaf_bin} \
			--input {output.paf} \
			--output results/{wildcards.sample_id}/{wildcards.region_id}/assembly_alignment/{wildcards.sample_id}_{wildcards.region_id}_shasta_to_grch38_minimap_{wildcards.asm_preset} \
			--pixelsPerMb 30 --minAlignmentQuality 1 --minAlignmentLength 0 > {log} 2>&1
		"""

rule align_assembly_to_chunked_reference:
	output:
		paf="results/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_ZOOMED_shasta_to_grch38_minimap_{asm_preset}.paf"
	input:
		analyzePaf_bin=config["ANALYSEPAF"]["bin"],
		grch38_reference_chunked="results/{sample_id}/{region_id}/assembly_alignment/grch38.chunked.fasta",
		subregion_shasta_assembly="results/{sample_id}/{region_id}/shasta/ShastaRun/Assembly.fasta"
	params:
		asm_preset=config["MINIMAP"]["asmPreset"]
	benchmark: "benchmarks/{sample_id}/{region_id}/align_assembly_to_reference_{asm_preset}.benchmark.txt"
	log: "logs/{sample_id}/{region_id}/align_assembly_to_reference_{asm_preset}.log"
	container: "docker://mkolmogo/card_minimap2:2.23"
	threads: 64
	shell:
		"""
		minimap2 -t {threads} -I 20G -cx {params.asm_preset} -K 1M --eqx --cs {input.grch38_reference_chunked} {input.subregion_shasta_assembly} > {output.paf}
		{input.analyzePaf_bin} \
			--input {output.paf} \
			--output results/{wildcards.sample_id}/{wildcards.region_id}/assembly_alignment/{wildcards.sample_id}_{wildcards.region_id}_ZOOMED_shasta_to_grch38_minimap_{wildcards.asm_preset} \
			--pixelsPerMb 200 --minAlignmentQuality 1 > {log} 2>&1
		"""

rule get_extended_anchor_stats:
	output:
		anchor_reads_info="results/{sample_id}/{region_id}/anchors/extended_anchor_reads_info.tsv",
		anchor_stats_dir=directory("results/{sample_id}/{region_id}/extended_anchor_stats")
	input:
		python_script="/private/groups/migalab/shnegi/vg_anchors_project/notebooks/python-scripts/old-method-scripts/preprocess_vganchor_outfiles_extention.py",
		R_script="/private/groups/migalab/shnegi/vg_anchors_project/notebooks/python-scripts/old-method-scripts/get_extended_anchor_stats.R",
		anchors="results/{sample_id}/{region_id}/anchors/subgraph.anchors.json.extended.jsonl",
		subregion_shasta_assembly="results/{sample_id}/{region_id}/shasta/ShastaRun/Assembly.fasta"
	params:
		seqtech="ont_r10",
		region=config['region']['chromosome'] + ":" + config['region']['start'] + "-" + config['region']['end']
	log: "logs/{sample_id}/{region_id}/get_extended_anchor_stats.log"
	shell:
		"""
		# Since this JSON is confusing to interpret, convert it to a TSV...
		python3 {input.python_script} -j {input.anchors}
		# Next, generate anchor stats plots...
		Rscript {input.R_script} -d results/{wildcards.sample_id}/{wildcards.region_id} -o {params.seqtech}_{wildcards.region_id} -r {params.region} > {log} 2>&1
		"""

rule run_displayPafAlignments:
	output:
		csv="results/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_ZOOMED_shasta_to_grch38_minimap_{asm_preset}_displayPaf.csv",
		plots_dir=directory("results/{sample_id}/{region_id}/assembly_alignment/{asm_preset}_plots")
	input:
		displayPaf_bin=config["DISPLAYPAF"]["bin"],
		grch38_reference_chunked="results/{sample_id}/{region_id}/assembly_alignment/grch38.chunked.fasta",
		subregion_shasta_assembly="results/{sample_id}/{region_id}/shasta/ShastaRun/Assembly.fasta",
		paf="results/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_ZOOMED_shasta_to_grch38_minimap_{asm_preset}.paf",
		R_script="/private/groups/migalab/shnegi/vg_anchors_project/notebooks/python-scripts/old-method-scripts/analyse_displayPaf_outputs.R"
	params:
		asm_preset=config["MINIMAP"]["asmPreset"],
	benchmark: "benchmarks/{sample_id}/{region_id}/run_displayPafAlignments_{asm_preset}.benchmark.txt"
	log: "logs/{sample_id}/{region_id}/run_displayPafAlignments_{asm_preset}.log"
	shell:
		"""
		{input.displayPaf_bin} \
			--paf {input.paf} -r {input.grch38_reference_chunked} -a {input.subregion_shasta_assembly} \
			--output results/{wildcards.sample_id}/{wildcards.region_id}/assembly_alignment/{wildcards.sample_id}_{wildcards.region_id}_ZOOMED_shasta_to_grch38_minimap_{wildcards.asm_preset}_displayPaf \
			--minAlignmentQuality 1 --minAlignmentLength 0 > {log} 2>&1
		
		Rscript {input.R_script} -c {output.csv} -o {wildcards.sample_id}_{wildcards.region_id} >> {log} 2>&1
		"""