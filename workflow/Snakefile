### snakemake file for aligning GIAB HG002 samples (ONT Q25 reads) with the haplotype-sampled graphs

#INCLUDING RULE FILES
SAMPLE_IDS = config['SAMPLE_IDS']
REGION_ID = config['region_id']
ASM_PRESET= config['MINIMAP']['asmPreset']
tmpdir = config['TMPDIR']
K=config['HAPLOTYPE_SAMPLING']['num_haps']


### ALL RULES
rule all:
	input:
		# expand("results/reads/{sample_id}.fasta", sample_id=SAMPLE_IDS),
		expand("results/reads/{sample_id}.kff", sample_id=SAMPLE_IDS),
		expand("results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.gbz", sample_id=SAMPLE_IDS, k=K),
		expand("results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.dist", sample_id=SAMPLE_IDS, k=K),
		expand("results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.longread.withzip.min", sample_id=SAMPLE_IDS, k=K),
		expand("results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.longread.zipcodes", sample_id=SAMPLE_IDS, k=K),
		expand("results_hs/alignment/hs-{k}/{sample_id}/{sample_id}.gaf.zst", sample_id=SAMPLE_IDS, k=K),
		expand("results_hs/alignment/hs-{k}/{sample_id}/alignments-combined.processed.gaf", sample_id=SAMPLE_IDS, k=K),
		expand("results_hs/alignment/hs-{k}/{sample_id}/alignments-combined.processed.sorted.gaf.gz", sample_id=SAMPLE_IDS, k=K),
		expand("results_hs/alignment/hs-{k}/{sample_id}/alignments-combined.processed.sorted.gaf.gz.tbi", sample_id=SAMPLE_IDS, k=K),
		expand("results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.pg.vg", sample_id=SAMPLE_IDS, k=K),
		expand("results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.snarls", sample_id=SAMPLE_IDS, k=K),
		expand("results_hs/hs-{k}/{sample_id}/{region_id}/chunk/subgraph.vg", sample_id=SAMPLE_IDS, region_id=REGION_ID, k=K),
		expand("results_hs/hs-{k}/{sample_id}/{region_id}/chunk/subgraph.pg.vg", sample_id=SAMPLE_IDS, region_id=REGION_ID, k=K),
		expand("results_hs/hs-{k}/{sample_id}/{region_id}/chunk/subgraph.pg.gfa", sample_id=SAMPLE_IDS, region_id=REGION_ID, k=K),
		expand("results_hs/hs-{k}/{sample_id}/{region_id}/chunk/subgraph.gaf", sample_id=SAMPLE_IDS, region_id=REGION_ID, k=K),
		expand("results_hs/hs-{k}/{sample_id}/{region_id}/chunk/subgraph.pg.dist", sample_id=SAMPLE_IDS, region_id=REGION_ID, k=K),
		expand("results_hs/hs-{k}/{sample_id}/{region_id}/anchors/subgraph.pkl", sample_id=SAMPLE_IDS, region_id=REGION_ID, k=K),
		expand("results_hs/hs-{k}/{sample_id}/{region_id}/anchors/subgraph.anchors.json.extended.jsonl", sample_id=SAMPLE_IDS, region_id=REGION_ID, k=K),
		expand("results_hs/hs-{k}/{sample_id}/{region_id}/anchors/subgraph.anchors.json.jsonl", sample_id=SAMPLE_IDS, region_id=REGION_ID, k=K),
		expand("results_hs/hs-{k}/{sample_id}/{region_id}/shasta/{sample_id}.subregion.fasta", sample_id=SAMPLE_IDS, region_id=REGION_ID, k=K),
		expand("results_hs/hs-{k}/{sample_id}/{region_id}/shasta/ShastaRun/Assembly.fasta", sample_id=SAMPLE_IDS, region_id=REGION_ID, k=K),
		# expand("results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_shasta_to_hg002_minimap_{asm_preset}.paf", sample_id=SAMPLE_IDS, region_id=REGION_ID, k=K, asm_preset=ASM_PRESET),
		expand("results_hs/hs-{k}/{sample_id}/{region_id}/anchors/extended_anchor_reads_info.tsv", sample_id=SAMPLE_IDS, region_id=REGION_ID, k=K),
		expand("results_hs/hs-{k}/{sample_id}/{region_id}/extended_anchor_stats", sample_id=SAMPLE_IDS, region_id=REGION_ID, k=K),
		expand("results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/hg002.chunked.fasta", sample_id=SAMPLE_IDS, region_id=REGION_ID, k=K),
		expand("results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_ZOOMED_shasta_to_hg002_minimap_{asm_preset}.paf", sample_id=SAMPLE_IDS, region_id=REGION_ID, k=K, asm_preset=ASM_PRESET),
		expand("results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_ZOOMED_shasta_to_hg002_minimap_{asm_preset}_displayPaf.csv", sample_id=SAMPLE_IDS, region_id=REGION_ID, k=K, asm_preset=ASM_PRESET),
		expand("results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/{asm_preset}_plots", sample_id=SAMPLE_IDS, region_id=REGION_ID, k=K, asm_preset=ASM_PRESET),
        expand("results_hs/hs-{k}/{sample_id}/{region_id}/hifiasm/{sample_id}.bp.hap1.p_ctg.gfa", sample_id=SAMPLE_IDS, region_id=REGION_ID, k=K),
        expand("results_hs/hs-{k}/{sample_id}/{region_id}/hifiasm/{sample_id}.bp.hap1.p_ctg.fasta", sample_id=SAMPLE_IDS, region_id=REGION_ID, k=K),
        expand("results_hs/hs-{k}/{sample_id}/{region_id}/hifiasm/{sample_id}.bp.hap1.p_ctg.fasta", sample_id=SAMPLE_IDS, region_id=REGION_ID, k=K),
        # expand("results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_hifiasm_hap1_to_hg002_minimap_{asm_preset}.paf", sample_id=SAMPLE_IDS, region_id=REGION_ID, k=K, asm_preset=ASM_PRESET),
        expand("results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_ZOOMED_hifiasm_hap1_to_hg002_minimap_{asm_preset}.paf", sample_id=SAMPLE_IDS, region_id=REGION_ID, k=K, asm_preset=ASM_PRESET)
		# expand("results_hs/alignment_chm13/{sample_id}/{sample_id}_to_CHM13_minimap.bam", sample_id=SAMPLE_IDS),
		# expand("results_hs/alignment_chm13/{sample_id}/{sample_id}_to_CHM13_dv.vcf.gz", sample_id=SAMPLE_IDS)


# rule convert_fq_to_fasta:
#     output:
#         fasta="results/reads/{sample_id}.fasta"
#     input:
#         ont_r10_sequence="/private/groups/migalab/kkyriaki/experiments/data/GIAB_2025/HG002/{sample_id}/{sample_id}.fastq"
#     benchmark:
#         "benchmarks/{sample_id}/convert_fq_to_fasta.benchmark.txt"
#     log:
#         "logs/{sample_id}/convert_fq_to_fasta.log"
#     shell:
#         """
#         # Convert FASTQ to FASTA
#         cat {input.ont_r10_sequence} | awk '{{if(NR%4==1) {{printf(">%s\\n",substr($0,2));}} else if(NR%4==2) print;}}' > {output.fasta}
#         """

rule count_kmers:
    output:
        kff = "results/reads/{sample_id}.kff"
    input:
        fasta="results/reads/{sample_id}.fasta"
    benchmark:
        "benchmarks/{sample_id}/convert_fq_to_fasta.benchmark.txt"
    log:
        "logs/{sample_id}/convert_fq_to_fasta.log"
    threads: 128
    shell:
        """
        # Count kmers from sequencing reads
        mkdir -p results/reads/tmp_{wildcards.sample_id} 
        kmc -k29 -m128 -okff -t{threads} -fa {input.fasta} results/reads/{wildcards.sample_id} results/reads/tmp_{wildcards.sample_id}
        """


rule haplotype_sample_graph:
    output:
        sampled_gbz = "results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.gbz"
    input:
        kff = "results/reads/{sample_id}.kff",
        graph_gbz = config["graph_base"] + ".gbz",
        graph_hapl = config["graph_base"] + ".hapl"
    params:
        k = config["HAPLOTYPE_SAMPLING"]["num_haps"],
        diploid_sampling = "--diploid_sampling" if config["HAPLOTYPE_SAMPLING"]["diploid_sampling"] else ""
    benchmark:
        "benchmarks/{sample_id}/hs-{k}/haplotype_sample_graph.benchmark.txt"
    log:
        "logs/{sample_id}/hs-{k}/haplotype_sample_graph.log"
    threads: 128
    shell:
        """
        vg haplotypes -v 2 -t {threads} --include-reference {params.diploid_sampling} --num-haplotypes {params.k} \
            -i {input.graph_hapl} -k {input.kff} -g {output.sampled_gbz} {input.graph_gbz} > {log} 2>&1
        """

rule generate_sampled_graph_indexes:
    output:
        distance_index="results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.dist",
        minimizer_index="results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.longread.withzip.min",
        zipcodes="results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.longread.zipcodes"
    input:
        sampled_gbz="results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.gbz"
    benchmark:
        "benchmarks/{sample_id}/hs-{k}/generate_sampled_graph_indexes.benchmark.txt"
    log:
        "logs/{sample_id}/hs-{k}/generate_sampled_graph_indexes.log"
    threads: 128
    shell:
        """
        vg autoindex -G {input.sampled_gbz} -t {threads} -p results_hs/graph/{wildcards.sample_id}/{wildcards.sample_id}-{wildcards.k}-sampled -w lr-giraffe > {log} 2>&1
        """

rule align_reads_with_vg_giraffe:
    output:
        alignment="results_hs/alignment/hs-{k}/{sample_id}/{sample_id}.gaf.zst"
    input:
        script="workflow/scripts/process_out.awk",
        sampled_gbz="results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.gbz",
        distance_index="results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.dist",
        minimizer_index="results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.longread.withzip.min",
        zipcodes="results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.longread.zipcodes",
        ont_r10_sequence="/private/groups/migalab/kkyriaki/experiments/data/GIAB_2025/HG002/{sample_id}/{sample_id}.fastq"
    benchmark:
        "benchmarks/{sample_id}/hs-{k}/align_reads_with_vg_giraffe.benchmark.txt"
    log:
        "logs/{sample_id}/hs-{k}/align_reads_with_vg_giraffe.log"
    threads: 128
    shell:
        """
        vg giraffe -t {threads} --parameter-preset r10 -f {input.ont_r10_sequence} -Z {input.sampled_gbz} -d {input.distance_index} -m {input.minimizer_index} -z {input.zipcodes} --output-format gaf 2> {log} | {input.script} | zstd > {output.alignment}
        """

rule parse_gaf:
	output:
		file="results_hs/alignment/hs-{k}/{sample_id}/alignments-combined.processed.gaf"
	input:
		script="workflow/scripts/parse_gaf.py",
		gaf="results_hs/alignment/hs-{k}/{sample_id}/{sample_id}.gaf.zst"
	log:
		"logs/{sample_id}/hs-{k}/parse_gaf.log"
	shell:
		"""
		python3 {input.script} {input.gaf} > {output.file} 2> {log}
		"""


rule sort_index_gaf:
	output:
		sorted_gaf = "results_hs/alignment/hs-{k}/{sample_id}/alignments-combined.processed.sorted.gaf.gz",
		gaf_index = "results_hs/alignment/hs-{k}/{sample_id}/alignments-combined.processed.sorted.gaf.gz.tbi"
	input:
		combined_gaf="results_hs/alignment/hs-{k}/{sample_id}/alignments-combined.processed.gaf"
	threads: 64
	shell:
		"""
		vg gamsort -t {threads} -p -G {input.combined_gaf} | bgzip -c > {output.sorted_gaf}
		tabix -@ {threads} -p gaf {output.sorted_gaf}
		"""

rule vg_convert_graph:
	output:
		sampled_pg_vg="results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.pg.vg"
	input:
		sampled_gbz="results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.gbz"
	benchmark:
		"benchmarks/{sample_id}/hs-{k}/vg_convert_graph.benchmark.txt"
	threads: 128
	shell:
		"""
		vg convert -t {threads} {input.sampled_gbz} -p > {output.sampled_pg_vg}
		"""

rule compute_snarls:
	output:
		snarls="results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.snarls"
	input:
		sampled_gbz="results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.gbz"
	threads: 32
	shell:
		"""
		vg snarls -t {threads} -T {input.sampled_gbz} > {output.snarls}
		"""

rule vg_chunk:
	output:
		subgraph_vg="results_hs/hs-{k}/{sample_id}/{region_id}/chunk/subgraph.vg",
		chunked_gaf="results_hs/hs-{k}/{sample_id}/{region_id}/chunk/subgraph.gaf",
		subgraph_pg_vg="results_hs/hs-{k}/{sample_id}/{region_id}/chunk/subgraph.pg.vg",
		subgraph_pg_gfa="results_hs/hs-{k}/{sample_id}/{region_id}/chunk/subgraph.pg.gfa"
	input:
		sorted_gaf="results_hs/alignment/hs-{k}/{sample_id}/alignments-combined.processed.sorted.gaf.gz",
		sampled_gbz="results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.gbz",
		snarls="results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.snarls"
	params:
		region="CHM13#0#" + config['region']['chromosome'] + ":" + config['region']['start'] + "-" + config['region']['end'],
		region_underscore="_0_CHM13#0#" + config['region']['chromosome'] + "_" + config['region']['start'] + "_" + config['region']['end'],
		prefix="results_hs/hs-{k}/{sample_id}/{region_id}/chunk/subgraph",
		region_id=config["region_id"]
	benchmark:
		"benchmarks/{sample_id}/hs-{k}/{region_id}/vg_chunk.benchmark.txt"
	log:
		"logs/{sample_id}/hs-{k}/{region_id}/vg_chunk.log"
	threads: 128
	shell:
		"""
        vg chunk -a {input.sorted_gaf} -F -g -x {input.sampled_gbz} -p {params.region} -S {input.snarls} --trace -t {threads} -b {params.prefix} > {output.subgraph_vg}
        mv {params.prefix}{params.region_underscore}.gaf {output.chunked_gaf}
		vg convert -p {output.subgraph_vg} > {output.subgraph_pg_vg}
		vg convert -f {output.subgraph_pg_vg} > {output.subgraph_pg_gfa}
		"""

rule vg_index_dist:
	output:
		subgraph_pg_dist="results_hs/hs-{k}/{sample_id}/{region_id}/chunk/subgraph.pg.dist"
	input:
		subgraph_pg_vg="results_hs/hs-{k}/{sample_id}/{region_id}/chunk/subgraph.pg.vg"
	log:
		"logs/{sample_id}/hs-{k}/{region_id}/vg_index_dist.log"
	threads: 32
	shell:
		"""
		 vg index {input.subgraph_pg_vg} --threads {threads} --dist-name {output.subgraph_pg_dist}
		"""

rule generate_anchors_dictionary:
	output:
		anchors_dictionary="results_hs/hs-{k}/{sample_id}/{region_id}/anchors/subgraph.pkl"
	input:
		subgraph_pg_dist="results_hs/hs-{k}/{sample_id}/{region_id}/chunk/subgraph.pg.dist",
		sampled_pg_vg="results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.pg.vg"
	benchmark:
		"benchmarks/{sample_id}/hs-{k}/{region_id}/generate_anchors_dictionary.benchmark.txt"
	log:
		"logs/{sample_id}/hs-{k}/{region_id}/generate_anchors_dictionary.log"
	shell:
		"""
		vg_anchor build --graph {input.sampled_pg_vg} --index {input.subgraph_pg_dist} \
			--output-prefix results_hs/hs-{wildcards.k}/{wildcards.sample_id}/{wildcards.region_id}/anchors/subgraph > {log} 2>&1
		"""

rule get_anchors_from_gaf:
	output:
		anchors_preext="results_hs/hs-{k}/{sample_id}/{region_id}/anchors/subgraph.anchors.json.jsonl",
		anchors="results_hs/hs-{k}/{sample_id}/{region_id}/anchors/subgraph.anchors.json.extended.jsonl"
	input:
		anchors_dictionary="results_hs/hs-{k}/{sample_id}/{region_id}/anchors/subgraph.pkl",
		chunked_gaf="results_hs/hs-{k}/{sample_id}/{region_id}/chunk/subgraph.gaf",
		sampled_pg_vg="results_hs/graph/{sample_id}/{sample_id}-{k}-sampled.pg.vg"
	benchmark:
		"benchmarks/{sample_id}/hs-{k}/{region_id}/get_anchors_from_gaf.benchmark.txt"
	log:
		"logs/{sample_id}/hs-{k}/{region_id}/get_anchors_from_gaf.log"
	shell:
		"""
		vg_anchor get-anchors --dictionary {input.anchors_dictionary} --graph {input.sampled_pg_vg} --alignment {input.chunked_gaf} \
			--output results_hs/hs-{wildcards.k}/{wildcards.sample_id}/{wildcards.region_id}/anchors/subgraph.anchors.json > {log} 2>&1
		"""

rule chunk_fasta:
	output:
		chunked_fasta = "results_hs/hs-{k}/{sample_id}/{region_id}/shasta/{sample_id}.subregion.fasta"
	input:
		chunked_gaf="results_hs/hs-{k}/{sample_id}/{region_id}/chunk/subgraph.gaf",
		fasta="results/reads/{sample_id}.fasta"
	benchmark:
		"benchmarks/{sample_id}/hs-{k}/{region_id}/chunk_fasta.benchmark.txt"
	log:
		"logs/{sample_id}/hs-{k}/{region_id}/chunk_fasta.log"
	container:
		"docker://pegi3s/seqkit:latest"
	shell:
		"""
		# Extract READ IDs from chunked GAF and then extract fasta records for these reads
		cut -f1 {input.chunked_gaf} | sort -u -T {config[TMPDIR]}| seqkit grep -f - {input.fasta} > {output.chunked_fasta}
		"""


# rule align_reads_to_linear_reference:
# 	output:
# 		alignment_bam = "results_hs/alignment_chm13/{sample_id}/{sample_id}_to_CHM13_minimap.bam",
# 		alignment_bam_idx = "results_hs/alignment_chm13/{sample_id}/{sample_id}_to_CHM13_minimap.bam.bai"
# 	input:
# 		fastq="/private/groups/migalab/kkyriaki/experiments/data/GIAB_2025/HG002/{sample_id}/{sample_id}.fastq",
# 		reference=config["chm13_ref"]
# 	params:
# 		mapMode="map-ont",
# 		kmerSize=config["MINIMAP"]["kmerSize"],
# 		minibatchSize=config["MINIMAP"]["minibatchSize"],
# 		mdString=config["MINIMAP"]["mdString"],
# 		eqxString=config["MINIMAP"]["eqxString"]
# 	benchmark: "benchmarks/{sample_id}/align_reads_to_linear_reference.benchmark.txt"
# 	log: "logs/{sample_id}/align_reads_to_linear_reference.log"
# 	container: "docker://mkolmogo/card_minimap2:2.23"
# 	threads: 64
# 	shell:
# 		"""
# 		minimap2 -ax {params.mapMode} {input.reference} {input.fastq} -k {params.kmerSize} -y -K {params.minibatchSize} -t {threads} {params.mdString} {params.eqxString} | samtools sort -@16 - > {output.alignment_bam}
# 		samtools index -@ {threads} {output.alignment_bam}
# 		"""


rule run_shasta_assembly:
	output: "results_hs/hs-{k}/{sample_id}/{region_id}/shasta/ShastaRun/Assembly.fasta"
	input:
		shasta=config["SHASTA"]["bin"],
		chunked_fasta = "results_hs/hs-{k}/{sample_id}/{region_id}/shasta/{sample_id}.subregion.fasta",
		shasta_conf = config["SHASTA"]["conf"],
		anchors="results_hs/hs-{k}/{sample_id}/{region_id}/anchors/subgraph.anchors.json.extended.jsonl"
	benchmark: "benchmarks/{sample_id}/hs-{k}/{region_id}/run_shasta_assembly.benchmark.txt"
	log: "logs/{sample_id}/hs-{k}/{region_id}/run_shasta_assembly.log"
	shell:
		"""
		## make a copy of the anchors.json for Shasta
		cp {input.anchors} results_hs/hs-{wildcards.k}/{wildcards.sample_id}/{wildcards.region_id}/shasta/anchors.json
		rm -rf results_hs/hs-{wildcards.k}/{wildcards.sample_id}/{wildcards.region_id}/shasta/ShastaRun
		
		{input.shasta} --input {input.chunked_fasta} --assemblyDirectory results_hs/hs-{wildcards.k}/{wildcards.sample_id}/{wildcards.region_id}/shasta/ShastaRun \
			--config {input.shasta_conf} --anchors results_hs/hs-{wildcards.k}/{wildcards.sample_id}/{wildcards.region_id}/shasta/anchors.json --memoryMode filesystem --memoryBacking disk > {log} 2>&1
		"""

# rule align_assembly_to_reference:
# 	output:
# 		paf="results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_shasta_to_hg002_minimap_{asm_preset}.paf"
# 	input:
# 		analyzePaf_bin=config["ANALYSEPAF"]["bin"],
# 		hg002_reference=config["HG002v101_ref"],
# 		subregion_shasta_assembly="results_hs/hs-{k}/{sample_id}/{region_id}/shasta/ShastaRun/Assembly.fasta"
# 	params:
# 		asm_preset=config["MINIMAP"]["asmPreset"]
# 	benchmark: "benchmarks/{sample_id}/hs-{k}/{region_id}/align_assembly_to_reference_{asm_preset}.benchmark.txt"
# 	log: "logs/{sample_id}/hs-{k}/{region_id}/align_assembly_to_reference_{asm_preset}.log"
# 	container: "docker://mkolmogo/card_minimap2:2.23"
# 	threads: 64
# 	shell:
# 		"""
# 		minimap2 -t {threads} -I 20G -cx {params.asm_preset} -K 0M --eqx --cs {input.hg002_reference} {input.subregion_shasta_assembly} > {output.paf}
# 		{input.analyzePaf_bin} \
# 			--input {output.paf} \
# 			--output results_hs/hs-{wildcards.k}/{wildcards.sample_id}/{wildcards.region_id}/assembly_alignment/{wildcards.sample_id}_{wildcards.region_id}_shasta_to_hg002_minimap_{wildcards.asm_preset} \
# 			--pixelsPerMb 5 --minAlignmentQuality 0 --minAlignmentLength 0 > {log} 2>&1
# 		"""


rule get_extended_anchor_stats:
	output:
		anchor_reads_info="results_hs/hs-{k}/{sample_id}/{region_id}/anchors/extended_anchor_reads_info.tsv",
		anchor_stats_dir=directory("results_hs/hs-{k}/{sample_id}/{region_id}/extended_anchor_stats")
	input:
		python_script="/private/groups/migalab/shnegi/vg_anchors_project/notebooks/python-scripts/old-method-scripts/preprocess_vganchor_outfiles_extention.py",
		R_script="/private/groups/migalab/shnegi/vg_anchors_project/notebooks/python-scripts/old-method-scripts/get_extended_anchor_stats.R",
		anchors="results_hs/hs-{k}/{sample_id}/{region_id}/anchors/subgraph.anchors.json.extended.jsonl",
		subregion_shasta_assembly="results_hs/hs-{k}/{sample_id}/{region_id}/shasta/ShastaRun/Assembly.fasta"
	params:
		seqtech="ont_r10",
		region=config['region']['chromosome'] + ":" + config['region']['start'] + "-" + config['region']['end']
	log: "logs/{sample_id}/hs-{k}/{region_id}/get_extended_anchor_stats.log"
	shell:
		"""
		# Since this JSON is confusing to interpret, convert it to a TSV...
		python3 {input.python_script} -j {input.anchors}
		# Next, generate anchor stats plots...
		Rscript {input.R_script} -d results_hs/hs-{wildcards.k}/{wildcards.sample_id}/{wildcards.region_id} -o {params.seqtech}_{wildcards.region_id} -r {params.region} > {log} 2>&1
		"""

rule chunk_hg002_reference:
	output:
		chunked_reference="results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/hg002.chunked.fasta"
	input:
		hg002_reference=config["HG002v101_ref"]
	params:
		mat_range=config['region']['chromosome'] + "_MATERNAL:" + str(int(config['region']['start']) - config['region']['flank']) + "-" + str(int(config['region']['end']) + config['region']['flank']),
		pat_range=config['region']['chromosome'] + "_PATERNAL:" + str(int(config['region']['start']) - config['region']['flank']) + "-" + str(int(config['region']['end']) + config['region']['flank'])
	benchmark:
		"benchmarks/{sample_id}/hs-{k}/{region_id}/chunk_hg002_reference.benchmark.txt"
	log:
		"logs/{sample_id}/hs-{k}/{region_id}/chunk_hg002_reference.log"
	shell:
		"""
		echo {params.mat_range} {params.pat_range} > {log} 2>&1
		samtools faidx {input.hg002_reference} {params.mat_range} {params.pat_range} > {output.chunked_reference}
		"""

rule align_assembly_to_chunked_reference:
	output:
		paf="results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_ZOOMED_shasta_to_hg002_minimap_{asm_preset}.paf"
	input:
		analyzePaf_bin=config["ANALYSEPAF"]["bin"],
		hg002_reference_chunked="results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/hg002.chunked.fasta",
		subregion_shasta_assembly="results_hs/hs-{k}/{sample_id}/{region_id}/shasta/ShastaRun/Assembly.fasta"
	params:
		asm_preset=config["MINIMAP"]["asmPreset"]
	benchmark: "benchmarks/{sample_id}/hs-{k}/{region_id}/align_assembly_to_reference_{asm_preset}.benchmark.txt"
	log: "logs/{sample_id}/hs-{k}/{region_id}/align_assembly_to_reference_{asm_preset}.log"
	container: "docker://mkolmogo/card_minimap2:2.23"
	threads: 64
	shell:
		"""
		minimap2 -t {threads} -I 20G -cx {params.asm_preset} -K 1M --eqx --cs {input.hg002_reference_chunked} {input.subregion_shasta_assembly} > {output.paf}
		{input.analyzePaf_bin} \
			--input {output.paf} \
			--output results_hs/hs-{wildcards.k}/{wildcards.sample_id}/{wildcards.region_id}/assembly_alignment/{wildcards.sample_id}_{wildcards.region_id}_ZOOMED_shasta_to_hg002_minimap_{wildcards.asm_preset} \
			--pixelsPerMb 600 --minAlignmentQuality 1 --minAlignmentLength 0 > {log} 2>&1
		"""

rule run_displayPafAlignments:
	output:
		csv="results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_ZOOMED_shasta_to_hg002_minimap_{asm_preset}_displayPaf.csv",
		plots_dir=directory("results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/{asm_preset}_plots")
	input:
		displayPaf_bin=config["DISPLAYPAF"]["bin"],
		hg002_reference_chunked="results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/hg002.chunked.fasta",
		subregion_shasta_assembly="results_hs/hs-{k}/{sample_id}/{region_id}/shasta/ShastaRun/Assembly.fasta",
		paf="results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_ZOOMED_shasta_to_hg002_minimap_{asm_preset}.paf",
		R_script="/private/groups/migalab/shnegi/vg_anchors_project/notebooks/python-scripts/old-method-scripts/analyse_displayPaf_outputs.R"
	params:
		asm_preset=config["MINIMAP"]["asmPreset"],
	benchmark: "benchmarks/{sample_id}/hs-{k}/{region_id}/run_displayPafAlignments_{asm_preset}.benchmark.txt"
	log: "logs/{sample_id}/hs-{k}/{region_id}/run_displayPafAlignments_{asm_preset}.log"
	shell:
		"""
		{input.displayPaf_bin} \
			--paf {input.paf} -r {input.hg002_reference_chunked} -a {input.subregion_shasta_assembly} \
			--output results_hs/hs-{wildcards.k}/{wildcards.sample_id}/{wildcards.region_id}/assembly_alignment/{wildcards.sample_id}_{wildcards.region_id}_ZOOMED_shasta_to_hg002_minimap_{wildcards.asm_preset}_displayPaf \
			--minAlignmentQuality 1 --minAlignmentLength 0 > {log} 2>&1
		
		Rscript {input.R_script} -c {output.csv} -o hs-{wildcards.k}_{wildcards.sample_id}_{wildcards.region_id} >> {log} 2>&1
		"""

rule run_hifiasm:
    output:
        hp1_gfa="results_hs/hs-{k}/{sample_id}/{region_id}/hifiasm/{sample_id}.bp.hap1.p_ctg.gfa",
        hp2_gfa="results_hs/hs-{k}/{sample_id}/{region_id}/hifiasm/{sample_id}.bp.hap2.p_ctg.gfa"
    input:
    	chunked_fasta="results_hs/hs-{k}/{sample_id}/{region_id}/shasta/{sample_id}.subregion.fasta",
    benchmark: "benchmarks/{sample_id}/hs-{k}/{region_id}/run_hifiasm.benchmark.txt"
    log: "logs/{sample_id}/hs-{k}/{region_id}/run_hifiasm.log"
    threads: 128
    shell:
        """
        eval "$(micromamba shell hook --shell bash)"
        # Run hifiasm
        micromamba activate /private/home/kkyriaki/micromamba/envs/hifiasm_v0.25.0
        hifiasm --ont -t {threads} -o results_hs/hs-{wildcards.k}/{wildcards.sample_id}/{wildcards.region_id}/hifiasm/{wildcards.sample_id} --write-ec {input.chunked_fasta} > {log} 2>&1
        """

rule convert_gfa_to_fasta:
    output:
        hp1_fasta="results_hs/hs-{k}/{sample_id}/{region_id}/hifiasm/{sample_id}.bp.hap1.p_ctg.fasta",
        hp2_fasta="results_hs/hs-{k}/{sample_id}/{region_id}/hifiasm/{sample_id}.bp.hap2.p_ctg.fasta"
    input:
        hp1_gfa="results_hs/hs-{k}/{sample_id}/{region_id}/hifiasm/{sample_id}.bp.hap1.p_ctg.gfa",
        hp2_gfa="results_hs/hs-{k}/{sample_id}/{region_id}/hifiasm/{sample_id}.bp.hap2.p_ctg.gfa"
    benchmark: "benchmarks/{sample_id}/hs-{k}/{region_id}/convert_gfa_to_fasta.benchmark.txt"
    log: "logs/{sample_id}/hs-{k}/{region_id}/convert_gfa_to_fasta.log"
    threads: 128
    shell:
        """
        eval "$(micromamba shell hook --shell bash)"
        # Convert gfa to fasta
        micromamba activate /private/home/kkyriaki/micromamba/envs/gfatools
        gfatools gfa2fa {input.hp1_gfa} > {output.hp1_fasta}
        gfatools gfa2fa {input.hp2_gfa} > {output.hp2_fasta}
        """


# rule align_hifiasm_assembly_to_reference:
#     output:
#         hp1_paf="results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_hifiasm_hap1_to_hg002_minimap_{asm_preset}.paf",
#         hp2_paf="results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_hifiasm_hap2_to_hg002_minimap_{asm_preset}.paf"
#     input:
#         analyzePaf_bin=config["ANALYSEPAF"]["bin"],
#         hg002_reference=config["HG002v101_ref"],
#         hifiasm_assembly_hp1="results_hs/hs-{k}/{sample_id}/{region_id}/hifiasm/{sample_id}.bp.hap1.p_ctg.fasta",
#         hifiasm_assembly_hp2="results_hs/hs-{k}/{sample_id}/{region_id}/hifiasm/{sample_id}.bp.hap2.p_ctg.fasta"
#     params:
#         asm_preset=config["MINIMAP"]["asmPreset"]
#     benchmark: "benchmarks/{sample_id}/hs-{k}/{region_id}/align_hifiasm_assembly_to_reference_{asm_preset}.benchmark.txt"
#     log: "logs/{sample_id}/hs-{k}/{region_id}/align_hifiasm_assembly_to_reference_{asm_preset}.log"
#     container: "docker://mkolmogo/card_minimap2:2.23"
#     threads: 64
#     shell:
#         """
#         minimap2 -t {threads} -I 20G -cx {params.asm_preset} -K 1M --eqx --cs {input.hg002_reference} {input.hifiasm_assembly_hp1} > {output.hp1_paf}
#         {input.analyzePaf_bin} \
#             --input {output.hp1_paf} \
#             --output results_hs/hs-{wildcards.k}/{wildcards.sample_id}/{wildcards.region_id}/assembly_alignment/{wildcards.sample_id}_{wildcards.region_id}_hifiasm_hap1_to_hg002_minimap_{wildcards.asm_preset} \
#             --pixelsPerMb 600 --minAlignmentQuality 0 > {log} 2>&1

#         minimap2 -t {threads} -I 20G -cx {params.asm_preset} -K 1M --eqx --cs {input.hg002_reference} {input.hifiasm_assembly_hp2} > {output.hp2_paf}
#         {input.analyzePaf_bin} \
#             --input {output.hp2_paf} \
#             --output results_hs/hs-{wildcards.k}/{wildcards.sample_id}/{wildcards.region_id}/assembly_alignment/{wildcards.sample_id}_{wildcards.region_id}_hifiasm_hap2_to_hg002_minimap_{wildcards.asm_preset} \
#             --pixelsPerMb 600 --minAlignmentQuality 0 >> {log} 2>&1
#         """


rule align_hifiasm_assembly_to_chunked_reference:
    output:
        hp1_paf="results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_ZOOMED_hifiasm_hap1_to_hg002_minimap_{asm_preset}.paf",
        hp2_paf="results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/{sample_id}_{region_id}_ZOOMED_hifiasm_hap2_to_kelp_minimap_{asm_preset}.paf"
    input:
        analyzePaf_bin=config["ANALYSEPAF"]["bin"],
        hg002_reference_chunked="results_hs/hs-{k}/{sample_id}/{region_id}/assembly_alignment/hg002.chunked.fasta",
        hifiasm_assembly_hp1="results_hs/hs-{k}/{sample_id}/{region_id}/hifiasm/{sample_id}.bp.hap1.p_ctg.fasta",
        hifiasm_assembly_hp2="results_hs/hs-{k}/{sample_id}/{region_id}/hifiasm/{sample_id}.bp.hap2.p_ctg.fasta"
    params:
        asm_preset=config["MINIMAP"]["asmPreset"]
    benchmark: "benchmarks/{sample_id}/hs-{k}/{region_id}/align_hifiasm_assembly_to_chunked_reference_{asm_preset}.benchmark.txt"
    log: "logs/{sample_id}/hs-{k}/{region_id}/align_hifiasm_assembly_to_chunked_reference_{asm_preset}.log"
    container: "docker://mkolmogo/card_minimap2:2.23"
    threads: 64
    shell:
        """
        minimap2 -t {threads} -I 20G -cx {params.asm_preset} -K 1M --eqx --cs {input.hg002_reference_chunked} {input.hifiasm_assembly_hp1} > {output.hp1_paf}
        {input.analyzePaf_bin} \
            --input {output.hp1_paf} \
            --output results_hs/hs-{wildcards.k}/{wildcards.sample_id}/{wildcards.region_id}/assembly_alignment/{wildcards.sample_id}_{wildcards.region_id}_ZOOMED_hifiasm_hap1_to_hg002_minimap_{wildcards.asm_preset} \
            --pixelsPerMb 600 --minAlignmentQuality 0 > {log} 2>&1

        minimap2 -t {threads} -I 20G -cx {params.asm_preset} -K 1M --eqx --cs {input.hg002_reference_chunked} {input.hifiasm_assembly_hp2} > {output.hp2_paf}
        {input.analyzePaf_bin} \
            --input {output.hp2_paf} \
            --output results_hs/hs-{wildcards.k}/{wildcards.sample_id}/{wildcards.region_id}/assembly_alignment/{wildcards.sample_id}_{wildcards.region_id}_ZOOMED_hifiasm_hap2_to_hg002_minimap_{wildcards.asm_preset} \
            --pixelsPerMb 600 --minAlignmentQuality 0 >> {log} 2>&1
        """
